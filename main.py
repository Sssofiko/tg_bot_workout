# main.py
import os
import re
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.filters import StateFilter
# main.py (–∏–º–ø–æ—Ä—Ç–∏—Ä—É–π)
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

import tempfile
import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt
from aiogram.types import FSInputFile

from db import init_db, add_entry, recent_summary, last_n_entries, timeseries_daily, add_body_params, last_n_body_params

# --- –®–∞–±–ª–æ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ---
CATEGORIES = {
    "arms": "üí™ –†—É–∫–∏",
    "legs": "ü¶µ –ù–æ–≥–∏",
    "core": "üß© –ü—Ä–µ—Å—Å",
    "backm": "ü¶¥ –°–ø–∏–Ω–∞",
    "cardio": "üèÉ –ö–∞—Ä–¥–∏–æ",
}

# –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ callback_data –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ ID
# –î–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ callback_data –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ ID
EXERCISES_BY_CAT = {
    "legs": [
        ("leg_press", "–ñ–∏–º –Ω–æ–≥–∞–º–∏"),
        ("abductor", "–°–≤–µ–¥–µ–Ω–∏–µ –±–µ–¥–µ—Ä"),
        ("adductor", "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –±–µ–¥–µ—Ä"),
        ("leg_curl", "–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥"),
        ("leg_ext", "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥"),
        ("multi_hip", "–û—Ç–≤–µ–¥–µ–Ω–∏–µ –Ω–∞–∑–∞–¥"),
    ],
    "arms": [
        ("hammer_curl", "–ú–æ–ª–æ—Ç–∫–æ–≤—ã–π –ø–æ–¥—ä—ë–º –Ω–∞ –±–∏—Ü–µ–ø—Å"),
        ("overhead_ext", "–†–∞–∑–≥–∏–±–∞–Ω–∏–µ —Ä—É–∫ –∏–∑-–∑–∞ –≥–æ–ª–æ–≤—ã"),
        ("db_press", "–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å—Ç–æ—è"),
        ("db_fly", "–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≥–∞–Ω—Ç–µ–ª–µ–π"),
        ("db_row", "–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –∫ –ø–æ—è—Å—É –≤ –Ω–∞–∫–ª–æ–Ω–µ"),
    ],
    "backm": [
        ("gravitron", "–ì—Ä–∞–≤–∏—Ç—Ä–æ–Ω"),
        ("seated_row", "–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —Ç—è–≥–∞ –≤ —Ä—ã—á–∞–∂–Ω–æ–º —Ç—Ä–µ–Ω–∞–∂—ë—Ä–µ"),
    ],
    "cardio": [
        ("run", "–ë–µ–≥"),
        ("stair", "–õ–µ—Å—Ç–Ω–∏—Ü–∞"),
    ],
    "core": [
        ("crunch", "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"),
        ("bicycle", "–í–µ–ª–æ—Å–∏–ø–µ–¥"),
        ("knee_crunch", "–°–∫—Ä—É—Ç–∫–∞ –∫ –∫–æ–ª–µ–Ω—É"),
        ("russian_twist", "–†—É—Å—Å–∫–∏–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è"),
    ],
}

# –ë—ã—Å—Ç—Ä—ã–π –∏–Ω–¥–µ–∫—Å id -> –Ω–∞–∑–≤–∞–Ω–∏–µ
EX_INDEX = {eid: title for pairs in EXERCISES_BY_CAT.values() for eid, title in pairs}


def kb_categories_inline() -> InlineKeyboardMarkup:
    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π + ¬´–î—Ä—É–≥–æ–µ¬ª
    rows = []
    row = []
    for cid, label in CATEGORIES.items():
        row.append(InlineKeyboardButton(text=label, callback_data=f"cat:{cid}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([InlineKeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ", callback_data="ex:other")])
    return InlineKeyboardMarkup(inline_keyboard=rows)


def kb_exercises_inline(cat_id: str) -> InlineKeyboardMarkup:
    pairs = EXERCISES_BY_CAT.get(cat_id, [])
    rows = []
    row = []
    for eid, title in pairs:
        row.append(InlineKeyboardButton(text=title, callback_data=f"ex:{eid}"))
        if len(row) == 2:
            rows.append(row)
            row = []
    if row:
        rows.append(row)
    rows.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="cat:back"),
        InlineKeyboardButton(text="‚úçÔ∏è –î—Ä—É–≥–æ–µ", callback_data="ex:other"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)


class AddEntry(StatesGroup):
    waiting_for_exercise = State()
    waiting_for_reps = State()
    waiting_for_weight = State()


class ProgressInput(StatesGroup):
    waiting = State()


class ChartInput(StatesGroup):
    waiting = State()


router = Router()


def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥", callback_data="add")],
        [InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
        [InlineKeyboardButton(text="üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫", callback_data="chart")],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")],
    ])


def reply_main_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")],
            [KeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"), KeyboardButton(text="üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫")],
            [KeyboardButton(text="üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞")],  # ‚Üê –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å"), KeyboardButton(text="üîΩ –°–∫—Ä—ã—Ç—å –º–µ–Ω—é")],
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É‚Ä¶"
    )


def kb_body_menu() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìê –†–æ—Å—Ç/–≤–µ—Å", callback_data="body:metrics")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="body:stats")],
    ])


class BodyInput(StatesGroup):
    waiting = State()


@router.message(F.text == "üìè –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–µ–ª–∞")
async def kb_body(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb_body_menu()
    )


@router.callback_query(F.data == "body:stats")
async def cb_body_stats(call: CallbackQuery):
    user_id = call.from_user.id
    rows = await last_n_body_params(user_id, n=10)

    if not rows:
        await call.message.answer("–ó–∞–º–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ üìê –†–æ—Å—Ç/–≤–µ—Å.", reply_markup=reply_main_kb())
        await call.answer()
        return

    lines = ["üìä –ò—Å—Ç–æ—Ä–∏—è –∑–∞–º–µ—Ä–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):"]
    for ts, h, w in rows:
        when = ts.split("T")[0] + " " + ts.split("T")[1][:5]
        h_txt = f"{h:g} —Å–º" if h is not None else "‚Äî"
        w_txt = f"{w:g} –∫–≥" if w is not None else "‚Äî"
        lines.append(f"‚Ä¢ {when}: {h_txt}, {w_txt}")

    await call.message.answer("\n".join(lines), reply_markup=reply_main_kb())
    await call.answer()


@router.callback_query(F.data == "body:metrics")
async def cb_body_metrics(call: CallbackQuery, state: FSMContext):
    # –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Ä–æ—Å—Ç–∞/–≤–µ—Å–∞
    await state.set_state(BodyInput.waiting)

    # –ü–æ–∫–∞–∂–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–º–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
    rows = await last_n_body_params(call.from_user.id, n=1)
    hint = ""
    if rows:
        ts, h, w = rows[0]
        when = ts.split("T")[0] + " " + ts.split("T")[1][:5]
        h_txt = f"{h:g} —Å–º" if h is not None else "‚Äî"
        w_txt = f"{w:g} –∫–≥" if w is not None else "‚Äî"
        hint = f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–º–µ—Ä: {when}: {h_txt}, {w_txt}"

    await call.message.answer(
        "–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –∏ –≤–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 170 65). "
        "–ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å ¬´170—Å–º 65–∫–≥¬ª, ¬´170, 65¬ª –∏ —Ç.–ø." + hint
    )
    await call.answer()


@router.message(BodyInput.waiting)
async def body_metrics_input(message: Message, state: FSMContext):
    text = message.text.strip().lower()
    # –≤—ã—Ç–∞—â–∏–º –ø–µ—Ä–≤—ã–µ –î–í–ê —á–∏—Å–ª–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    nums = re.findall(r"[-+]?\d+(?:[.,]\d+)?", text)
    if len(nums) < 2:
        await message.answer("–ù—É–∂–Ω–æ –¥–≤–∞ —á–∏—Å–ª–∞: —Ä–æ—Å—Ç (—Å–º) –∏ –≤–µ—Å (–∫–≥). –ü—Ä–∏–º–µ—Ä: 170 65")
        return
    try:
        height = float(nums[0].replace(",", "."))
        weight = float(nums[1].replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: 170 65")
        return

    await add_body_params(message.from_user.id, height, weight)
    await state.clear()
    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª: —Ä–æ—Å—Ç {height:g} —Å–º, –≤–µ—Å {weight:g} –∫–≥ ‚úÖ", reply_markup=reply_main_kb())


# main.py ‚Äî –≥–¥–µ-–Ω–∏–±—É–¥—å —Ä—è–¥–æ–º —Å main_menu()
async def setup_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="menu", description="–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"),
        BotCommand(command="faq", description="–ü–æ–º–æ—â—å"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"),
        BotCommand(command="progress", description="–°–≤–æ–¥–∫–∞ –ø–æ –ø—Ä–æ–≥—Ä–µ—Å—Å—É"),
        BotCommand(command="chart", description="–ì—Ä–∞—Ñ–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"),
        BotCommand(command="help", description="–ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ üëá",
        reply_markup=reply_main_kb()  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )
    # –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é:
    await message.answer("–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω–ª–∞–π–Ω-–º–µ–Ω—é:", reply_markup=main_menu())


@router.message(Command("menu"))
async def cmd_menu(message: Message):
    await message.answer("–ú–µ–Ω—é –æ—Ç–∫—Ä—ã—Ç–æ üëá", reply_markup=reply_main_kb())


@router.message(Command("faq"))
async def cmd_faq(message: Message):
    await cmd_help(message)


# –ù–∞–∂–∞–ª–∏ "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥"
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥")
async def kb_add(message: Message, state: FSMContext):
    await cmd_add(message, state)


# –ù–∞–∂–∞–ª–∏ "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å" ‚Äî –ø–æ–¥—Å–∫–∞–∂–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Å—Ç–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–∫—Ä—ã—Ç–æ–π
# –ù–∞–∂–∞–ª–∏ "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ /)
@router.message(F.text == "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def kb_progress(message: Message, state: FSMContext):
    await state.set_state(ProgressInput.waiting)
    await message.answer(
        "–í–≤–µ–¥–∏: <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 7\n(–ù–∞–ø–∏—à–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏)",
        reply_markup=reply_main_kb()
    )


# –ù–∞–∂–∞–ª–∏ "üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫" ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (–±–µ–∑ /)
@router.message(F.text == "üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫")
async def kb_chart(message: Message, state: FSMContext):
    await state.set_state(ChartInput.waiting)
    await message.answer(
        "–í–≤–µ–¥–∏: <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30\n(–ù–∞–ø–∏—à–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏)",
        reply_markup=reply_main_kb()
    )


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ "üìà –ü—Ä–æ–≥—Ä–µ—Å—Å"
@router.message(ProgressInput.waiting)
async def progress_input(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"}:
        await state.clear()
        await message.answer("–û–∫–µ–π, –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.", reply_markup=reply_main_kb())
        return

    # –ø–∞—Ä—Å–∏–º "<—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]"
    parts = text.split()
    days = 7
    if parts and parts[-1].isdigit():
        days = int(parts[-1])
        exercise = " ".join(parts[:-1]).strip() or None
    else:
        exercise = " ".join(parts).strip() or None

    rows = await recent_summary(message.from_user.id, exercise, days)
    await state.clear()

    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ /add –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ö–æ–¥¬ª.",
                             reply_markup=reply_main_kb())
        return

    lines = [f"–ò—Ç–æ–≥ –∑–∞ {days} –¥–Ω.:"]
    for ex, total_reps, sets in rows:
        lines.append(f"‚Ä¢ {ex}: {total_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ {sets} –ø–æ–¥—Ö–æ–¥–∞—Ö")

    if exercise:
        last = await last_n_entries(message.from_user.id, exercise, n=10)
        if last:
            lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—ã:")
            for ts, reps, weight in last:
                when = ts.split('T')[0] + " " + ts.split('T')[1][:5]
                wt = f", {weight} –∫–≥" if weight is not None else ""
                lines.append(f"‚Ä¢ {when}: {reps} –ø–æ–≤—Ç{wt}")

    await message.answer("\n".join(lines), reply_markup=reply_main_kb())


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ "üñºÔ∏è –ì—Ä–∞—Ñ–∏–∫"
@router.message(ChartInput.waiting)
async def chart_input(message: Message, state: FSMContext):
    text = message.text.strip()
    if text.lower() in {"–æ—Ç–º–µ–Ω–∞", "cancel", "–Ω–∞–∑–∞–¥"}:
        await state.clear()
        await message.answer("–û–∫–µ–π, –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≥—Ä–∞—Ñ–∏–∫–∞.", reply_markup=reply_main_kb())
        return

    parts = text.split()
    days = 30
    if parts and parts[-1].isdigit():
        days = int(parts[-1])
        exercise = " ".join(parts[:-1]).strip()
    else:
        exercise = " ".join(parts).strip()

    if not exercise:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30",
                             reply_markup=reply_main_kb())
        return

    rows = await timeseries_daily(message.from_user.id, exercise, days)
    await state.clear()

    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.",
                             reply_markup=reply_main_kb())
        return

    # ‚Äî –Ω–∏–∂–µ —Ç–≤–æ—è –∂–µ –ª–æ–≥–∏–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ‚Äî
    import tempfile, os
    import matplotlib
    matplotlib.use("Agg")
    import matplotlib.pyplot as plt
    from aiogram.types import FSInputFile

    dates = [r[0] for r in rows]
    reps = [int(r[1]) if r[1] is not None else 0 for r in rows]
    volume = [float(r[2]) if r[2] is not None else 0.0 for r in rows]
    has_volume = any(v > 0 for v in volume)

    fig = plt.figure(figsize=(8, 4.5), dpi=150)
    ax1 = plt.gca()
    ax1.plot(dates, reps, marker="o", label="–ü–æ–≤—Ç–æ—Ä—ã/–¥–µ–Ω—å")
    ax1.set_xlabel("–î–∞—Ç–∞")
    ax1.set_ylabel("–ü–æ–≤—Ç–æ—Ä—ã")
    if has_volume:
        ax2 = ax1.twinx()
        ax2.plot(dates, volume, marker="s", linestyle="--", label="–û–±—ä—ë–º (–ø–æ–≤—Ç√ó–≤–µ—Å)")
        ax2.set_ylabel("–û–±—ä—ë–º")
    plt.title(f"{exercise.title()}: –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {days} –¥–Ω.")
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()

    tmp_path = os.path.join(tempfile.gettempdir(), f"chart_{message.from_user.id}.png")
    plt.savefig(tmp_path)
    plt.close(fig)

    await message.answer_photo(
        FSInputFile(tmp_path),
        caption=f"{exercise.title()} ‚Äî {days} –¥–Ω.\n"
                f"–õ–∏–Ω–∏—è 1: –ø–æ–≤—Ç–æ—Ä—ã/–¥–µ–Ω—å" + (", –ª–∏–Ω–∏—è 2: –æ–±—ä—ë–º (–ø–æ–≤—Ç√ó–≤–µ—Å)" if has_volume else ""),
        reply_markup=reply_main_kb()
    )


# –ù–∞–∂–∞–ª–∏ "‚ùì –ü–æ–º–æ—â—å"
@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def kb_help(message: Message):
    await cmd_help(message)


# –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@router.message(F.text == "üîΩ –°–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def kb_hide(message: Message):
    await message.answer("–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ. –ù–∞–ø–∏—à–∏ /menu —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å.", reply_markup=ReplyKeyboardRemove())


@router.callback_query(F.data == "add")
async def cb_add(call: CallbackQuery, state: FSMContext):
    await state.set_state(AddEntry.waiting_for_exercise)
    await call.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–µ¬ª –∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=kb_categories_inline()
    )
    await call.answer()


# –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: cat:<id> –∏–ª–∏ cat:back
@router.callback_query(F.data.startswith("cat:"))
async def cb_choose_category(call: CallbackQuery, state: FSMContext):
    _, cat_id = call.data.split(":", 1)

    if cat_id == "back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        await call.message.edit_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–µ¬ª:",
            reply_markup=kb_categories_inline()
        )
        await call.answer()
        return

    if cat_id not in CATEGORIES:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", show_alert=False)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    await call.message.edit_text(
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {CATEGORIES[cat_id]}\n–í—ã–±–µ—Ä–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
        reply_markup=kb_exercises_inline(cat_id)
    )
    await call.answer()


# –ù–∞–∂–∞–ª–∏ –Ω–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: ex:<id> –∏–ª–∏ ex:other
@router.callback_query(F.data.startswith("ex:"))
async def cb_choose_exercise(call: CallbackQuery, state: FSMContext):
    _, ex_id = call.data.split(":", 1)

    if ex_id == "other":
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Äî –∂–¥—ë–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await call.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ—Ç–∂–∏–º–∞–Ω–∏—è).")
        await call.answer()
        return

    title = EX_INDEX.get(ex_id)
    if not title:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ", show_alert=False)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–≤—Ç–æ—Ä–∞–º
    await state.update_data(exercise=title)
    await state.set_state(AddEntry.waiting_for_reps)
    await call.message.answer(f"–í—ã–±—Ä–∞–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {title}\n–°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")
    await call.answer()


@router.callback_query(F.data == "progress")
async def cb_progress(call: CallbackQuery, state: FSMContext):
    await state.set_state(ProgressInput.waiting)
    await call.message.answer(
        "–í–≤–µ–¥–∏: <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 7\n(–ù–∞–ø–∏—à–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏)",
        reply_markup=reply_main_kb()
    )
    await call.answer()


@router.callback_query(F.data == "chart")
async def cb_chart(call: CallbackQuery, state: FSMContext):
    await state.set_state(ChartInput.waiting)
    await call.message.answer(
        "–í–≤–µ–¥–∏: <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30\n(–ù–∞–ø–∏—à–∏ ¬´–æ—Ç–º–µ–Ω–∞¬ª —á—Ç–æ–±—ã –≤—ã–π—Ç–∏)",
        reply_markup=reply_main_kb()
    )
    await call.answer()


@router.callback_query(F.data == "help")
async def cb_help(call: CallbackQuery):
    await cmd_help(call.message)  # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ö—ç–Ω–¥–ª–µ—Ä
    await call.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
        "‚Ä¢ /add ‚Äî –ø–æ—à–∞–≥–æ–≤–æ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ ‚Üí –ø–æ–≤—Ç–æ—Ä—ã ‚Üí (–æ–ø—Ü.) –≤–µ—Å.\n"
        "‚Ä¢ –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥: –æ—Ç–ø—Ä–∞–≤—å '–æ—Ç–∂–∏–º–∞–Ω–∏—è 15' –∏–ª–∏ '–∂–∏–º –ª—ë–∂–∞ 8 40'.\n"
        "‚Ä¢ /progress [—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ] [–¥–Ω–µ–π] ‚Äî –Ω–∞–ø—Ä.: /progress –æ—Ç–∂–∏–º–∞–Ω–∏—è 30.\n"
        "‚Ä¢ /chart <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π] ‚Äî PNG-–≥—Ä–∞—Ñ–∏–∫ –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –æ–±—ä—ë–º–∞. –ü—Ä–∏–º–µ—Ä: /chart –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30."
    )


@router.message(Command("add"))
async def cmd_add(message: Message, state: FSMContext):
    await state.set_state(AddEntry.waiting_for_exercise)
    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–î—Ä—É–≥–æ–µ¬ª –∏ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=kb_categories_inline()
    )
    # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å –ø—Ä–æ –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥:
    await message.answer("–õ–∞–π—Ñ—Ö–∞–∫: –º–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 20 60¬ª ‚Äî —è –≤—Å—ë –∑–∞–ø–∏—à—É.")


@router.message(AddEntry.waiting_for_exercise)
async def add_exercise(message: Message, state: FSMContext):
    text = message.text.strip()

    # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å "–±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥": "<exercise> <reps> [weight]"
    m = re.match(r"^([^\d\n]+?)\s+(\d+)(?:\s+([\d.,]+))?$", text)
    if m:
        exercise = m.group(1).strip()
        reps = int(m.group(2))
        weight = None
        if m.group(3):
            try:
                weight = float(m.group(3).replace(",", "."))
            except ValueError:
                weight = None

        await add_entry(message.from_user.id, exercise, reps, weight)
        await state.clear()
        await message.answer(
            f"–ó–∞–ø–∏—Å–∞–ª –∫–∞–∫ –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ ‚úÖ\n"
            f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å: /progress –∏–ª–∏ /progress {exercise} 7",
            reply_markup=reply_main_kb()
        )

        return

    # –û–±—ã—á–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π
    if len(text) < 2:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(exercise=text)
    await state.set_state(AddEntry.waiting_for_reps)
    await message.answer("–°–∫–æ–ª—å–∫–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π? (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")


@router.message(AddEntry.waiting_for_reps, F.text.regexp(r"^\d+$"))
async def add_reps(message: Message, state: FSMContext):
    reps = int(message.text)
    await state.update_data(reps=reps)
    await state.set_state(AddEntry.waiting_for_weight)
    await message.answer("–í–µ—Å? (–∫–≥, –º–æ–∂–Ω–æ 0 –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å')")


@router.message(AddEntry.waiting_for_reps)
async def add_reps_invalid(message: Message, state: FSMContext):
    await message.answer("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä 12.")


@router.message(AddEntry.waiting_for_weight)
async def add_weight_skip_or_value(message: Message, state: FSMContext):
    text_raw = message.text.strip()
    text = text_raw.lower()

    # –±—ã—Å—Ç—Ä—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø—Ä–æ–ø—É—Å–∫–∞
    if text in {"–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip"}:
        data = await state.get_data()
        await add_entry(message.from_user.id, data["exercise"], data["reps"], None)
        await state.clear()
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å–∞–ª –ø–æ–¥—Ö–æ–¥ ‚úÖ", reply_markup=reply_main_kb())
        return

    # –†–∞–∑—Ä–µ—à–∏–º ¬´0¬ª –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π –≤–µ—Å
    if text == "0":
        data = await state.get_data()
        await add_entry(message.from_user.id, data["exercise"], data["reps"], 0.0)
        await state.clear()
        await message.answer("–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å–∞–ª –ø–æ–¥—Ö–æ–¥ ‚úÖ", reply_markup=reply_main_kb())
        return

    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã—Ç–∞—â–∏—Ç—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏: 7, 7.5, 7,5, "+7", "~7", "7 –∫–≥", "7 -", "7-10" –∏ —Ç.–ø.
    m = re.search(r"[-+]?\d+(?:[.,]\d+)?", text)
    if not m:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 42.5) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    try:
        weight = float(m.group(0).replace(",", "."))
    except ValueError:
        await message.answer("–í–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 42.5) –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    data = await state.get_data()
    await add_entry(message.from_user.id, data["exercise"], data["reps"], weight)
    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤–æ! –ó–∞–ø–∏—Å–∞–ª –ø–æ–¥—Ö–æ–¥ ‚úÖ", reply_markup=reply_main_kb())


@router.message(Command("progress"))
async def cmd_progress(message: Message):
    args = message.text.split()[1:]
    exercise = None
    days = 7
    if args:
        if args[-1].isdigit():
            days = int(args[-1])
            if len(args) > 1:
                exercise = " ".join(args[:-1])
        else:
            exercise = " ".join(args)
    rows = await recent_summary(message.from_user.id, exercise, days)
    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –ø–æ–¥—Ö–æ–¥ —á–µ—Ä–µ–∑ /add.")
        return
    lines = [f"–ò—Ç–æ–≥ –∑–∞ {days} –¥–Ω.:"]
    for ex, total_reps, sets in rows:
        lines.append(f"‚Ä¢ {ex}: {total_reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ {sets} –ø–æ–¥—Ö–æ–¥–∞—Ö")
    if exercise:
        last = await last_n_entries(message.from_user.id, exercise, n=10)
        if last:
            lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥—Ö–æ–¥—ã:")
            for ts, reps, weight in last:
                when = ts.split('T')[0] + " " + ts.split('T')[1][:5]
                wt = f", {weight} –∫–≥" if weight is not None else ""
                lines.append(f"‚Ä¢ {when}: {reps} –ø–æ–≤—Ç{wt}")
    await message.answer("\n".join(lines))


@router.message(Command("chart"))
async def cmd_chart(message: Message):
    # –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: /chart <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]
    args = message.text.split()[1:]
    if not args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /chart <—É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ> [–¥–Ω–µ–π]\n–ù–∞–ø—Ä–∏–º–µ—Ä: /chart –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30")
        return

    days = 30
    if args[-1].isdigit():
        days = int(args[-1])
        exercise = " ".join(args[:-1]).strip()
    else:
        exercise = " ".join(args).strip()

    if not exercise:
        await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ. –ü—Ä–∏–º–µ—Ä: /chart –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è 30")
        return

    rows = await timeseries_daily(message.from_user.id, exercise, days)
    if not rows:
        await message.answer("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
        return

    dates = [r[0] for r in rows]  # 'YYYY-MM-DD'
    reps = [int(r[1]) if r[1] is not None else 0 for r in rows]
    volume = [float(r[2]) if r[2] is not None else 0.0 for r in rows]
    has_volume = any(v > 0 for v in volume)

    # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = plt.figure(figsize=(8, 4.5), dpi=150)
    ax1 = plt.gca()
    ax1.plot(dates, reps, marker="o", label="–ü–æ–≤—Ç–æ—Ä—ã/–¥–µ–Ω—å")
    ax1.set_xlabel("–î–∞—Ç–∞")
    ax1.set_ylabel("–ü–æ–≤—Ç–æ—Ä—ã")

    if has_volume:
        ax2 = ax1.twinx()
        ax2.plot(dates, volume, marker="s", linestyle="--", label="–û–±—ä—ë–º (–ø–æ–≤—Ç√ó–≤–µ—Å)")
        ax2.set_ylabel("–û–±—ä—ë–º")

    plt.title(f"{exercise.title()}: –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {days} –¥–Ω.")
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()

    tmp_path = os.path.join(tempfile.gettempdir(), f"chart_{message.from_user.id}.png")
    plt.savefig(tmp_path)
    plt.close(fig)

    await message.answer_photo(FSInputFile(tmp_path),
                               caption=f"{exercise.title()} ‚Äî {days} –¥–Ω.\n"
                                       f"–õ–∏–Ω–∏—è 1: –ø–æ–≤—Ç–æ—Ä—ã/–¥–µ–Ω—å"
                                       + (", –ª–∏–Ω–∏—è 2: –æ–±—ä—ë–º (–ø–æ–≤—Ç√ó–≤–µ—Å)" if has_volume else ""))


@router.message(
    StateFilter(None),  # ‚Üê –±—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    F.text.regexp(r"^(?!/)([^\d\n]+?)\s+(\d+)(?:\s+([\d.,]+))?$")
)
async def quick_add(message: Message):
    text = message.text.strip()
    if text.startswith("/"):  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
        return

    m = re.match(r"^(?!/)([^\d\n]+?)\s+(\d+)(?:\s+([\d.,]+))?$", text)
    exercise = m.group(1).strip()
    reps = int(m.group(2))
    weight = None
    if m.group(3):
        try:
            weight = float(m.group(3).replace(",", "."))
        except ValueError:
            weight = None
    await add_entry(message.from_user.id, exercise, reps, weight)
    await message.answer("–ó–∞–ø–∏—Å–∞–ª! –ò—Å–ø–æ–ª—å–∑—É–π /progress —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É.", reply_markup=reply_main_kb())


async def main():
    load_dotenv()
    token = os.getenv("BOT_TOKEN")
    if not token:
        raise RuntimeError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
    logging.basicConfig(level=logging.INFO)
    await init_db()
    bot = Bot(token=token)
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    # <‚Äî –í–ê–ñ–ù–û: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    await setup_bot_commands(bot)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
